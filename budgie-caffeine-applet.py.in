#!/usr/bin/env python3
import gettext
import subprocess
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Budgie', '1.0')
from gi.repository import Budgie, Gdk, Gio, GObject, Gtk

POWER_SCHEME = "org.gnome.settings-daemon.plugins.power"
SESSION_SCHEME = "org.gnome.desktop.session"

class BudgieCaffeine(GObject.Object, Budgie.Plugin):
    __gtype_name__ = "@PROJECT_NAME@"

    def __init__(self):
        GObject.Object.__init__(self)
        loc = gettext.translation("@PROJECT_NAME@", fallback=True)
        loc.install("@PROJECT_NAME@")

    def do_get_panel_widget(self, uuid):
        return CaffeineApplet(uuid)

class CaffeineSettings(Gtk.Grid):
    def __init__(self, setting):
        super().__init__(row_spacing=8)
        self.setting = setting

        label = Gtk.Label(_("Enable Notification"), halign=Gtk.Align.START)
        self.add(label)
        notify_switch = Gtk.Switch(halign=Gtk.Align.END, hexpand=True)
        self.attach(notify_switch, 1, 0, 1, 1)

        setting.bind("enable-notification", notify_switch, "active",
                          Gio.SettingsBindFlags.DEFAULT)
        self.show_all()

class CaffeineApplet(Budgie.Applet):
    def __init__(self, uuid):
        Budgie.Applet.__init__(self)
        self.uuid = uuid
        self.manager = None
        self.defaults = {}

        # Ensure schema and prefix is set properly
        self.set_settings_prefix("/com/github/yursan9/budgie-caffeine-applet")
        self.set_settings_schema("com.github.yursan9.budgie-caffeine-applet")
        self.settings = self.get_applet_settings(self.uuid)

        # Controlled settings
        self.power_settings = Gio.Settings(POWER_SCHEME)
        self.session_settings = Gio.Settings(SESSION_SCHEME)
        self.fetch_default()

	    # Button Trigger
        self.box = Gtk.EventBox()
        self.icon = Gtk.Image.new_from_icon_name("caffeine-cup-empty",
            Gtk.IconSize.BUTTON)
        self.box.add(self.icon)
        self.add(self.box)

        # Popover
        self.popover = Budgie.Popover.new(self.box)
        self.popover.get_style_context().add_class("caffeine-popover")
        layout = Gtk.Box()
        layout.set_border_width(6)
        label = Gtk.Label(_("Caffeine Mode"))
        layout.pack_start(label, False, True, 6)
        self.switch = Gtk.Switch()
        layout.pack_end(self.switch, False, True, 6)
        self.popover.add(layout)

        self.popover.get_child().show_all()
        self.box.show_all()
        self.show_all()

        # Connect Callback
        self.switch.connect("notify::active", self._on_caffeine_on)
        self.box.connect("button-press-event", self._on_press)

    def do_get_settings_ui(self):
        return CaffeineSettings(self.get_applet_settings(self.uuid))

    def do_supports_settings(self):
        return True

    def do_update_popovers(self, manager):
        manager.register_popover(self.box, self.popover)
        self.manager = manager

    def send_notification(self, turn_on, auto=None):
        cmd = ["notify-send"]
        if turn_on:
            cmd.append(_("Turn on Caffeine Boost"))
            if auto:
                cmd.append(_("{app} automatically turn on Caffeine Mode").format(app=auto))
            cmd.append("--icon=caffeine-cup-full")
        else:
            cmd.append(_("Turn off Caffeine Boost"))
            cmd.append("--icon=caffeine-cup-empty")
        subprocess.Popen(cmd)

    def fetch_default(self):
        self.defaults = {
            "idle-delay": self.session_settings.get_uint("idle-delay"),
            "idle-dim": self.power_settings.get_boolean("idle-dim"),
            "sleep-inactive-ac-type": self.power_settings.get_string(
                "sleep-inactive-ac-type"),
            "sleep-inactive-battery-type": self.power_settings.get_string(
                "sleep-inactive-battery-type")
        }

    def _on_caffeine_on(self, switch, params):
        self.box.remove(self.icon)
        if switch.get_active():
            self.fetch_default()
            self.session_settings.set_uint("idle-delay", 0)
            self.power_settings.set_boolean("idle-dim", False)
            self.power_settings.set_string("sleep-inactive-ac-type",
                                           "nothing")
            self.power_settings.set_string("sleep-inactive-battery-type",
                                           "nothing")

            self.icon = Gtk.Image.new_from_icon_name("caffeine-cup-full",
                Gtk.IconSize.BUTTON)
            self.box.add(self.icon)

        else:
            self.session_settings.set_uint("idle-delay",
                    self.defaults.get("idle-delay"))
            self.power_settings.set_boolean("idle-dim",
                    self.defaults.get("idle-dim"))
            self.power_settings.set_string("sleep-inactive-ac-type",
                    self.defaults.get("sleep-inactive-ac-type"))
            self.power_settings.set_string("sleep-inactive-battery-type",
                    self.defaults.get("sleep-inactive-battery-type"))

            self.icon = Gtk.Image.new_from_icon_name("caffeine-cup-empty",
                Gtk.IconSize.BUTTON)
            self.box.add(self.icon)

        # Send notification if enabled
        if self.settings.get_boolean("enable-notification"):
            self.send_notification(switch.get_active())
        self.box.show_all()

    def	_on_press(self, box, e):
        if e.button != 1:
            return Gdk.EVENT_PROPAGATE

        if self.popover.get_visible():
            self.popover.hide()
        else:
            self.manager.show_popover(self.box)
        return Gdk.EVENT_STOP
